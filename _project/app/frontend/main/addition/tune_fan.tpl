<article>
    <h1 class="header">PHP-FAN.5: Тонкая настройка PHP-FAN <span>/ PHP-FAN.5: Tuning PHP-FAN</span></h1>

    <h2>Методы обработки блока</h2>
    <p>Стандартная обработка блока состоит из трех этапов:</p>
    <dl class="art_def">
        <dt>Конструирование</dt>
        <dd>На этом этапе происходит создание блоков формирующих контент для запроса.  На этом этапе формируются основные meta-данные блока, проверяются роли и возможность отображения блока через кэш. Порядок конструирования блоков определяется их вложенностью: первым создается блок root и далее в порядке вложения.</dd>

        <dt>Инициализация</dt>
        <dd>Основной этап формирования контента блока. Порядок инициализации определяется индексом, который задается в мета-данных. По умолчанию, этот индекс равен 1000, соответственно все блоки с меньшим индексом будут инициализироваться раньше, а с большим - позже. Блоки с одинаковыми индексами будут инициализироваться в порядке их создания.</dd>

        <dt>Визуализация</dt>
        <dd>Происходит передача сформированных данных в класс view и формирование контента для передачи клиенту.</dd>
    </dl>

    <p>На этапе конструирования не рекомендуется делать запросы к БД или выполнять другие процедуры, требующие много времени и ресурсов для выполнения. Основные операции, определяющие контент блока выполняются во время инициализации. Многие блоки могут состоять только из этого метода (без учета методов в родительских классах). Тем не менее, иногда возникают ситуации, когда требуется выполнить какие-то действия вне стандартного порядка - для этого в блоке есть несколько специальных методов.
    </p>

    <h2>Переопределение классов ядра</h2>

    <p>Иногда логика, реализованная в стандартных классах ядра может не удовлетворять разработчика. При этом, ни в коем случае не следует менять классы ядра. В большинстве случаев достаточно создать класс с таким-же именем и идентичным namespace (отличающийся первой частью - вместо "core" указывается "project"). Такой класс автоматически обнаруживается системой и будет использован вместо класса ядра (обязательным условием здесь является наследование от соответсвующего класса ядра).</p>
    <p>Однако простое переопределение классов будет работать не всегда. Таким образом можно переопределять только конечные классы: из которых непосредственно создаются объекты, у которых вызываются статические методы и от которых идет наследование классов проекта. Классы, от которых наследуются другие классы ядра использоваться автоматически не будут. Если возникает необходимость изменить логику промежуточного класса - следует переопределить все конечные классы, унаследованные в ядре от этого класса и создать в них соответствующие методы. Чтобы избежать "дублирования кода" используйте <a href="http://www.php.net/manual/ru/language.oop5.traits.php" target="php_func">трейты</a> (обратите внимание, что для использования трейтов нужна версия PHP не ниже 5.4).</p>
    <p>При переопределении методов, в каждом таком методе обязательно делайте вызов родительского метода с соответствующим именем через <b>parent::methodName();</b>. Старайтесь избегать больших объемов кода в переопределенных методах - выносите все дополнительные процедуры в отдельные дополнительные методы. При обновлении ядра проверяйте изменения внесенные в классы, которые переопределены и сопоставляйте их со своими изменениями.</p>

    <h2>Внутрение/внешние переброски</h2>

    <p>
    </p>

    <h2>Отладочный режим</h2>

    <p>
    </p>

</article>

<article>
    <h1 class="header">PHP-FAN.5: Стандарты кодирования PHP-FAN <span>/ PHP-FAN.5: Coding Standards PHP-FAN</span></h1>

    <p>Стандарты кодирования PHP-FAN во многом совпадают со <a href="{$pear_url}/ru/standards.php" target="pear_standard">стандартами кодирования PEAR</a>:</p>
    <ul class="list_links">
        {foreach key=urn item=txt from=$pear_standards}
            <li>
                <a href="{$pear_url}/en/standards.{$urn}.php" target="pear_standard">{$txt['en']}</a> /
                {if isset($txt['ru_'])}
                    <a href="{$pear_url}/en/standards.{$urn}.php" target="pear_standard">{$txt['ru_']}</a>
                {else}
                    <a href="{$pear_url}/ru/standards.{$urn}.php" target="pear_standard">{$txt['ru']}</a>
                {/if}
            </li>
        {/foreach}
    </ul>
    <p>Но кроме этого, есть и свои специфические особенности:</p>
    <dl class="art_def">
        <dt>Имена переменных</dt>
        <dd>Имена переменных и сойства объектов указываются в <a href="http://ru.wikipedia.org/wiki/CamelCase" target="wikipedia">CamelCase</a> стиле. При этом есть одна особенность - имя любой переменной всегда начинается с символа обозначающего <a href="http://www.php.net/manual/ru/language.types.php" target="php_net">тип перенной</a>. Т.о. если, например, переменная содержит массив, то её имя должно быть примерно таким: <b>$aData</b>, а переменная с объектом будет выглядеть так: <b>$oServiceRequest</b> и т.д.</dd>
        <dt>Имена классов</dt>
        <dd>Имена классов и namespace всегда указываются в нижнем регистре. В качестве разделителя слов используется символ "_".</dd>
        <dt>Завершающая скобка класса или метода</dt>
        <dd>После закрывающей скобки класса или метода всегда ставится комментарий, повторяющий название этого класса или метода, причем название класса указывается с учетом namespace.</dd>
        <dt>Виртуальные свойства классов</dt>
        <dd>У объектов PHP-FAN практически не бывает явно определенных public-свойств, но многие объекты обладают виртуальными свойствами, доступ к которым можно получить через магические методы <a href="http://www.php.net/manual/ru/language.oop5.overloading.php#object.get" target="php_net">__get()</a> и <a href="http://www.php.net/manual/ru/language.oop5.overloading.php#object.set" target="php_net">__set()</a>. Такой подход позволяет полность контролировать процесс получения и установки public-свойств (например, у некоторых объектов public-свойства только для чтения). Если список виртуальных свойств можно четко определить - они должны быть описаны в коментариях класса. Очень часто имена виртуальных свойств зависят от внешних факторов (например, у объекта <b>row</b>, полученного с помощью <b>entity</b> имена свойств повторяют названия полей в таблице БД). В связи с этим, чтобы избежать лишнего "маппинга", правила для "Имен переменных", описанные выше не распространяются на виртуальные свойства.</dd>
        <dt>Виртуальные методы классов</dt>
        <dd>У некоторых объектов есть виртуальные методы, которые как и виртуальные свойства вызываются с помощью магического метода <a href="http://www.php.net/manual/ru/language.oop5.overloading.php#object.call" target="php_net">__call()</a>. Очень часто такие методы служат для работы с виртуальными свойствами (дополнительные опции при получении/установке виртуальных свойств). Поэтому имена таких методов образуются по другим правилам: префикс "get_" или "set_" и имя свойства. Этим самым достигается несколько целей: избегаем конфликта, в случае если имя свойства случайно совпадет с явно заданным методом; имена таких методов легко отличимы от других методов; избегаем маппинг маппинга. Если виртуальный метод создается не для работы с виртуальными свойствами, то его имя должно задаваться по правилам CamelCase. Если список виртуальных методов можно четко определить - они должны быть описаны в коментариях класса.</dd>
        <dt>namespace классов</dt>
        <dd>namespace классов всегда указываются в самой первой строке, непосредственно после оператора <b>&lt;?php</b></dd>
        <dt>Комментарии классов, свойств и методов</dt>
        <dd>- должны оформлятся в соответствии с требованиями <a href="http://ru.wikipedia.org/wiki/PhpDocumentor" target="wikipedia">phpDocumentor</a></dd>
    </dl>
</article>